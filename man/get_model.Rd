% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_model.R
\name{get_model}
\alias{get_model}
\title{Get Data From Trello API}
\usage{
get_model(
  parent = NULL,
  child = NULL,
  id = NULL,
  token = NULL,
  query = NULL,
  url = NULL,
  filter = NULL,
  limit = 1000,
  on.error = "stop",
  retry.times = 3,
  handle = NULL,
  verbose = FALSE,
  response,
  paging,
  bind.rows
)
}
\arguments{
\item{parent}{Parent resource, e.g. \code{"board"} or \code{NULL}.}

\item{child}{Child resource, eg. \code{"card"} or \code{NULL}.}

\item{id}{Model ID or \code{NULL}.}

\item{token}{Secure token, see \link{get_token} for how to obtain it.
If \code{NULL}, it will attempt to read a cached token from disk.}

\item{query}{Named list of key-value pairs, see \link[httr:GET]{httr::GET} for details.}

\item{url}{Url for the GET request. Can be \code{NULL} if \code{parent} is specified,
or a combination of \code{parent}, \code{child} and \code{id} is provided.}

\item{filter}{Defaults to \code{"all"} which includes both open and archived cards
or all action types, depending on what resource is requested.}

\item{limit}{Defaults to \code{1000}. Set to \code{Inf} (or 0) to get everything.}

\item{on.error}{Whether to \code{"stop"}, \code{"warn"} or \code{"message"} on API error.}

\item{retry.times}{How many times to re-try when a request fails. Defaults
to 3.}

\item{handle}{The handle to use with this request, see \link[httr:RETRY]{httr::RETRY}.}

\item{verbose}{Set to \code{TRUE} for verbose output.}

\item{response}{Deprecated. When a request fails and \code{on.error} is something
else than \code{"error"}, the unparsed response object is included in the result.}

\item{paging}{Deprecated, use \code{limit = Inf} instead.}

\item{bind.rows}{Deprecated and abandoned.}
}
\value{
A data frame with API responses.
}
\description{
Issue \link[httr:GET]{httr::GET} requests for Trello API endpoints.
}
\section{Request limits}{


At maximum, the API can retrieve 1000 results in a single call. Setting
\code{limit > 1000} will activate paging. When paging is used, the request will
be issued repeatedly, retrieving new batch of results each time until
the \code{limit} is reached or there is nothing else to fetch. Results are fetched
chronologically, ie. newest results are retrieved first (eg. newest cards).
Use \code{limit = Inf} to make sure you get all.
}

\section{Errors}{


If the request fails, server error messages are reprinted on the console.
Depending on the value of \code{on.error}, the request call can return an error
in R, or can issue a warning/message and return \code{NULL}.
}

\section{Results}{


The API returns JSON objects which are parsed using \link[jsonlite:fromJSON]{jsonlite::fromJSON}.
Non-JSON results throw an error, but these should never happen anyway. The
result is always a data frame, or a \code{tibble} if the package is installed.
}

\section{Filter}{


Both \code{filter} and \code{limit} exist as explicitly defined arguments, but you can
ignore them in favor of supplying their values as query parameters, eg.
\code{query = list(filter = "filter_value", limit = "limit_value")}.
}

\examples{

# No authorization is required to access public boards, so there is no need
# to create a token, just the board id:
url = "https://trello.com/b/Pw3EioMM/trellor-r-api-for-trello"
bid = get_id_board(url)

# Once we have the ID, we can use it to make specific queries:
labels = get_board_labels(bid)                # Get all labels
cards = get_board_cards(bid, filter = "all")  # Get all cards, incl. archived

# We can also call get_model() directly:
lists = get_model(parent = "board", child = "lists", id = bid)

# As with boards, cards can be queried for particular resources:
card10 = cards$id[10]
acts10 = get_card_actions(card10)    # Get all actions performed on that card

# To specify the number of results, use limit = number. If limit = 0, all
# results will be acquired eventually.

\dontrun{
acts_all = get_board_actions(bid, limit = 0)
}

# For private and team boards, you need a secure token:

\dontrun{
token = get_token("your_key", "your_secret")
cards_open = get_board_cards(board_id, token, filter = "open")
}
}
\seealso{
\link[httr:GET]{httr::GET}, \link[jsonlite:fromJSON]{jsonlite::fromJSON}, \link{get_token}, \link{get_id}
}
